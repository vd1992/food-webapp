{"version":3,"sources":["logo.svg","components/Form.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","id","htmlFor","type","placeholder","defaultValue","name","onClick","event","preventDefault","formNumber","document","getElementById","numberChange","value","Results","xAxis","nutritionLabel","yAxis","dataNutrition","Plot","createPlotlyComponent","Plotly","info","x","y","dataURL","src","dataIngredients","data","layout","width","height","title","App","useState","barcodeNumber","setBarcode","setDataURL","setDataIngredients","setDataNutrition","number","a","URL","fetch","response","json","dataPromise","status","product","image_front_url","ingredients_text","nutriments","sugars_100g","proteins_100g","fat_100g","fetchFoodData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"0OAAe,I,MC0CAA,MAtCf,SAAcC,GAWV,OAEI,qBAAKC,UAAU,OAAOC,GAAG,SAAzB,SACI,iCACI,uBAAOD,UAAW,aAAaE,QAAQ,QAAvC,0EAIA,uBACIC,KAAK,OACLF,GAAG,eACHG,YAAY,IACZC,aAAa,IACbC,KAAK,WAIT,wBAAQN,UAAU,SAASO,QAzBvC,SAAsBC,GAClBA,EAAMC,iBAEN,IAAIC,EAAWC,SAASC,eAAe,gBACvCb,EAAMc,aAAaH,EAAWI,QAqBtB,yB,gCCSDC,MApCf,SAAiBhB,GAIb,IAAIiB,EAAQjB,EAAMkB,eACdC,EAAQnB,EAAMoB,cACZC,EAAOC,IAAsBC,KAC/BC,EAAO,CAACpB,KAAM,MAAOqB,EAAGR,EAAOS,EAAEP,GAMrC,OACI,sBAAKlB,UAAU,cAAf,WAGMD,EAAM2B,SAAW,uFAEnB,qBAAKC,IAAK5B,EAAM2B,UAChB,4BAAI3B,EAAM6B,kBAET7B,EAAM2B,SACP,cAACN,EAAD,CACIS,KAAM,CACFN,GAEJO,OAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,mDCyC1CC,MAlEf,WAAe,MAGuBC,mBAAS,KAHhC,mBAGNC,EAHM,KAGSC,EAHT,OAIgBF,mBAAS,IAJzB,mBAINT,EAJM,KAIEY,EAJF,OAKiCH,mBAAS,IAL1C,mBAKNP,EALM,KAKWW,EALX,OAM6BJ,mBAAS,IANtC,mBAMNhB,EANM,KAMSqB,EANT,iDAiBb,WAA6BC,GAA7B,mBAAAC,EAAA,6DAGMC,EAAM,+CAAiDF,EAH7D,SAIyBG,MAAMD,GAJ/B,cAIQE,EAJR,gBAK4BA,EAASC,OALrC,UAQ0B,KAHlBC,EALR,QAQiBC,OARjB,wBASMV,EAAW,IACXC,EAAmB,IACnBC,EAAiB,IAXvB,kCAiBEF,EAAWS,EAAYE,QAAQC,iBAC/BX,EAAmBQ,EAAYE,QAAQE,kBACvCX,EAAiB,CAACO,EAAYE,QAAQG,WAAWC,YAAaN,EAAYE,QAAQG,WAAWE,cAAeP,EAAYE,QAAQG,WAAWG,WAnB7I,gEAjBa,sBA6Cb,OACE,sBAAKvD,UAAU,MAAf,UACE,cAAC,EAAD,CACEa,aArCN,SAAyB4B,GACvBJ,EAAWI,GAZA,oCAaXe,CAAcf,MAsCK,MAAhBL,GAEC,cAAC,EAAD,CACEV,QAASA,EACTE,gBAAiBA,EACjBT,cAAeA,EACfF,eAjDe,CAAC,QAAS,UAAW,aCH/BwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFxD,SAASC,eAAe,SAM1B6C,M","file":"static/js/main.3ff952e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\n\r\n//this function controls the form component for where values are added and the button that adds functionality to the form\r\n//it takes in as props a function that controls the barcode state in the parent component\r\nfunction Form(props) {\r\n\r\n    //function triggered by form button\r\n    function buttonSubmit(event){\r\n        event.preventDefault();\r\n        //grab the value stored in the form, then pass it up to the parent component via the function passed in as props\r\n        let formNumber=document.getElementById(\"number-input\")\r\n        props.numberChange(formNumber.value);\r\n    }\r\n\r\n    //render the form and button, event handler fires the associated function \r\n    return(\r\n       \r\n        <div className=\"form\" id=\"formId\">\r\n            <form>\r\n                <label className =\"form-label\" htmlFor=\"input\">\r\n                    Search by barcode number, try 04963406 if you don't know one\r\n                </label>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"number-input\"\r\n                    placeholder=\"0\"\r\n                    defaultValue=\"0\"\r\n                    name=\"number\"\r\n\r\n                />\r\n                \r\n                <button className=\"button\" onClick={buttonSubmit}>Click</button>\r\n\r\n\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Form; \r\n\r\n","import Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\n//this function renders the results of the AJAX call to API\r\n//it takes in as props values that the parent component got from the call, ingredients, image URL, labels for an x-axis and values for a y-axis\r\nfunction Results(props) {\r\n\r\n    //assign to variables the value the props bring in, create a Plot element using the imported library\r\n    //then assign to variable info all the needed information to graph, so in the render part a single variable can be passed into the Plot element\r\n    let xAxis = props.nutritionLabel;\r\n    let yAxis = props.dataNutrition;\r\n    const Plot = createPlotlyComponent(Plotly);\r\n    let info = {type: 'bar', x: xAxis, y:yAxis}; \r\n\r\n    //render all the results, a single variable info is passed into the component, it is defined by props above, it is an object of various values\r\n    //falsey type checking is used, empty results are passed in as empty strings for props which resolve false, therefore a logical operation\r\n    //can conditionally render elements depending on whether strings are passed in with info (true) or empty (false)\r\n    //in example, result not found results in empty url string, so when url props is false (empty), an error message can be displayed\r\n    return(\r\n        <div className=\"results-div\">\r\n\r\n            \r\n            {!props.dataURL && <p>This number is erroneous or not in the food database. </p>}\r\n            \r\n            <img src={props.dataURL}/>\r\n            <p>{props.dataIngredients}</p>\r\n            \r\n            {props.dataURL &&\r\n            <Plot\r\n                data={[\r\n                    info\r\n                ]}\r\n                layout={{width: 540, height: 360, title: 'Per 100g serving, macronutrients in grams'}}\r\n            />\r\n            }\r\n\r\n        </div>            \r\n\r\n    )\r\n}\r\n\r\nexport default Results; \r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\n\nimport Form from './components/Form';\nimport Results from './components/Results';\n\nfunction App() {\n\n  //set state for information to be assigned later in API calls\n  const [barcodeNumber, setBarcode] = useState(\"0\");\n  const [dataURL,setDataURL] = useState(\"\");\n  const [dataIngredients, setDataIngredients] = useState(\"\");\n  const [dataNutrition, setDataNutrition] = useState(\"\");\n  //this is a set of labels that goes along with dataNutrition, paired as they are used for graphing, placed here next to dataNutrition for intuitive purposes\n  const nutritionLabel = [\"sugar\", \"protein\", \"fat\"]; \n\n  // this function changes the value for the barcode, it is called in the form component, when called it also calls an Async function\n  function changeFormValue(number){\n    setBarcode(number);\n    fetchFoodData(number)\n  }\n  \n  //this Async function handles the API call, it takes the new barcode from function changeFormValue as an argument\n  async function fetchFoodData(number){\n\n    //create a URL from input, send GET to the link and promise chain response\n    let URL = \"https://us.openfoodfacts.org/api/v0/product/\" + number;\n    const response = await fetch(URL);\n    const dataPromise = await response.json();  \n\n    //status code of a call where there is no product found is 0, therefore in that case set states to empty string and exit\n    if(dataPromise.status===0){\n        setDataURL(\"\");\n        setDataIngredients(\"\");\n        setDataNutrition(\"\");\n        return\n    }\n    \n    //console.log(dataPromise.product.nutriments);\n    //results must have been found, so, states are set using the promise's response, JSON data\n    setDataURL(dataPromise.product.image_front_url)\n    setDataIngredients(dataPromise.product.ingredients_text)\n    setDataNutrition([dataPromise.product.nutriments.sugars_100g, dataPromise.product.nutriments.proteins_100g, dataPromise.product.nutriments.fat_100g]);\n    //console.log(dataNutrition);\n    return \n}\n\n  //render the app and its components\n  //form has the function to control barcode value passed in as props\n  //the barcode value has a default of 0, when barcode is 0 the results component is not rendered, so by default on load that component is not present\n  //in all other cases, JSON-extracted values or empty strings are passed in as props\n  return (\n    <div className=\"app\">\n      <Form\n        numberChange={changeFormValue}\n\n      />\n      {barcodeNumber!==\"0\" && \n        \n        <Results\n          dataURL={dataURL}\n          dataIngredients={dataIngredients}\n          dataNutrition={dataNutrition}\n          nutritionLabel={nutritionLabel}\n        />\n      \n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}