[{"C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\index.js":"1","C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\App.js":"2","C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\reportWebVitals.js":"3","C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\components\\Form.js":"4","C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\components\\Results.js":"5"},{"size":463,"mtime":1612053093579,"results":"6","hashOfConfig":"7"},{"size":2772,"mtime":1612333272679,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1386,"mtime":1612333213648,"results":"10","hashOfConfig":"7"},{"size":1924,"mtime":1612333189520,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1sw8d2b",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\index.js",[],["27","28"],"C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\App.js",["29"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\n\nimport Form from './components/Form';\nimport Results from './components/Results';\n\nfunction App() {\n\n  //set state for information to be assigned later in API calls\n  const [barcodeNumber, setBarcode] = useState(\"0\");\n  const [dataURL,setDataURL] = useState(\"\");\n  const [dataIngredients, setDataIngredients] = useState(\"\");\n  const [dataNutrition, setDataNutrition] = useState(\"\");\n  //this is a set of labels that goes along with dataNutrition, paired as they are used for graphing, placed here next to dataNutrition for intuitive purposes\n  const nutritionLabel = [\"sugar\", \"protein\", \"fat\"]; \n\n  // this function changes the value for the barcode, it is called in the form component, when called it also calls an Async function\n  function changeFormValue(number){\n    setBarcode(number);\n    fetchFoodData(number)\n  }\n  \n  //this Async function handles the API call, it takes the new barcode from function changeFormValue as an argument\n  async function fetchFoodData(number){\n\n    //create a URL from input, send GET to the link and promise chain response\n    let URL = \"https://us.openfoodfacts.org/api/v0/product/\" + number;\n    const response = await fetch(URL);\n    const dataPromise = await response.json();  \n\n    //status code of a call where there is no product found is 0, therefore in that case set states to empty string and exit\n    if(dataPromise.status===0){\n        setDataURL(\"\");\n        setDataIngredients(\"\");\n        setDataNutrition(\"\");\n        return\n    }\n    \n    //console.log(dataPromise.product.nutriments);\n    //results must have been found, so, states are set using the promise's response, JSON data\n    setDataURL(dataPromise.product.image_front_url)\n    setDataIngredients(dataPromise.product.ingredients_text)\n    setDataNutrition([dataPromise.product.nutriments.sugars_100g, dataPromise.product.nutriments.proteins_100g, dataPromise.product.nutriments.fat_100g]);\n    //console.log(dataNutrition);\n    return \n}\n\n  //render the app and its components\n  //form has the function to control barcode value passed in as props\n  //the barcode value has a default of 0, when barcode is 0 the results component is not rendered, so by default on load that component is not present\n  //in all other cases, JSON-extracted values or empty strings are passed in as props\n  return (\n    <div className=\"app\">\n      <Form\n        numberChange={changeFormValue}\n\n      />\n      {barcodeNumber!==\"0\" && \n        \n        <Results\n          dataURL={dataURL}\n          dataIngredients={dataIngredients}\n          dataNutrition={dataNutrition}\n          nutritionLabel={nutritionLabel}\n        />\n      \n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\reportWebVitals.js",[],"C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\components\\Form.js",["30"],"import React, { useState } from \"react\";\r\n\r\n//this function controls the form component for where values are added and the button that adds functionality to the form\r\n//it takes in as props a function that controls the barcode state in the parent component\r\nfunction Form(props) {\r\n\r\n    //function triggered by form button\r\n    function buttonSubmit(event){\r\n        event.preventDefault();\r\n        //grab the value stored in the form, then pass it up to the parent component via the function passed in as props\r\n        let formNumber=document.getElementById(\"number-input\")\r\n        props.numberChange(formNumber.value);\r\n    }\r\n\r\n    //render the form and button, event handler fires the associated function \r\n    return(\r\n       \r\n        <div className=\"form\" id=\"formId\">\r\n            <form>\r\n                <label className =\"form-label\" htmlFor=\"input\">\r\n                    Search by barcode number, try 04963406 if you don't know one\r\n                </label>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"number-input\"\r\n                    placeholder=\"0\"\r\n                    defaultValue=\"0\"\r\n                    name=\"number\"\r\n\r\n                />\r\n                \r\n                <button className=\"button\" onClick={buttonSubmit}>Click</button>\r\n\r\n\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Form; \r\n\r\n",["31","32"],"C:\\Users\\Vachan\\Documents\\Learning\\food-webapp\\src\\components\\Results.js",["33"],"import Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\n\r\n//this function renders the results of the AJAX call to API\r\n//it takes in as props values that the parent component got from the call, ingredients, image URL, labels for an x-axis and values for a y-axis\r\nfunction Results(props) {\r\n\r\n    //assign to variables the value the props bring in, create a Plot element using the imported library\r\n    //then assign to variable info all the needed information to graph, so in the render part a single variable can be passed into the Plot element\r\n    let xAxis = props.nutritionLabel;\r\n    let yAxis = props.dataNutrition;\r\n    const Plot = createPlotlyComponent(Plotly);\r\n    let info = {type: 'bar', x: xAxis, y:yAxis}; \r\n\r\n    //render all the results, a single variable info is passed into the component, it is defined by props above, it is an object of various values\r\n    //falsey type checking is used, empty results are passed in as empty strings for props which resolve false, therefore a logical operation\r\n    //can conditionally render elements depending on whether strings are passed in with info (true) or empty (false)\r\n    //in example, result not found results in empty url string, so when url props is false (empty), an error message can be displayed\r\n    return(\r\n        <div className=\"results-div\">\r\n\r\n            \r\n            {!props.dataURL && <p>This number is erroneous or not in the food database. </p>}\r\n            \r\n            <img src={props.dataURL}/>\r\n            <p>{props.dataIngredients}</p>\r\n            \r\n            {props.dataURL &&\r\n            <Plot\r\n                data={[\r\n                    info\r\n                ]}\r\n                layout={{width: 540, height: 360, title: 'Per 100g serving, macronutrients in grams'}}\r\n            />\r\n            }\r\n\r\n        </div>            \r\n\r\n    )\r\n}\r\n\r\nexport default Results; \r\n\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"34","replacedBy":"43"},{"ruleId":"36","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":25,"column":13,"nodeType":"47","endLine":25,"endColumn":39},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["48"],["49"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]